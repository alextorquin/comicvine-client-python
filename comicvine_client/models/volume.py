# coding: utf-8

"""
    ComicVine API

    OpenAPI specification for the ComicVine API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from comicvine_client.configuration import Configuration


class Volume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'object',
        'name': 'object',
        'aliases': 'object',
        'api_detail_url': 'object',
        'site_detail_url': 'object',
        'date_added': 'object',
        'date_last_updated': 'object',
        'character_credits': 'object',
        'concept_credits': 'object',
        'count_of_issues': 'object',
        'deck': 'object',
        'description': 'object',
        'first_issue': 'object',
        'image': 'object',
        'last_issue': 'object',
        'location_credits': 'object',
        'object_credits': 'object',
        'person_credits': 'object',
        'publisher': 'object',
        'start_year': 'object',
        'team_credits': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'aliases': 'aliases',
        'api_detail_url': 'api_detail_url',
        'site_detail_url': 'site_detail_url',
        'date_added': 'date_added',
        'date_last_updated': 'date_last_updated',
        'character_credits': 'character_credits',
        'concept_credits': 'concept_credits',
        'count_of_issues': 'count_of_issues',
        'deck': 'deck',
        'description': 'description',
        'first_issue': 'first_issue',
        'image': 'image',
        'last_issue': 'last_issue',
        'location_credits': 'location_credits',
        'object_credits': 'object_credits',
        'person_credits': 'person_credits',
        'publisher': 'publisher',
        'start_year': 'start_year',
        'team_credits': 'team_credits'
    }

    def __init__(self, id=None, name=None, aliases=None, api_detail_url=None, site_detail_url=None, date_added=None, date_last_updated=None, character_credits=None, concept_credits=None, count_of_issues=None, deck=None, description=None, first_issue=None, image=None, last_issue=None, location_credits=None, object_credits=None, person_credits=None, publisher=None, start_year=None, team_credits=None, local_vars_configuration=None):  # noqa: E501
        """Volume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._aliases = None
        self._api_detail_url = None
        self._site_detail_url = None
        self._date_added = None
        self._date_last_updated = None
        self._character_credits = None
        self._concept_credits = None
        self._count_of_issues = None
        self._deck = None
        self._description = None
        self._first_issue = None
        self._image = None
        self._last_issue = None
        self._location_credits = None
        self._object_credits = None
        self._person_credits = None
        self._publisher = None
        self._start_year = None
        self._team_credits = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if aliases is not None:
            self.aliases = aliases
        if api_detail_url is not None:
            self.api_detail_url = api_detail_url
        if site_detail_url is not None:
            self.site_detail_url = site_detail_url
        if date_added is not None:
            self.date_added = date_added
        if date_last_updated is not None:
            self.date_last_updated = date_last_updated
        if character_credits is not None:
            self.character_credits = character_credits
        if concept_credits is not None:
            self.concept_credits = concept_credits
        if count_of_issues is not None:
            self.count_of_issues = count_of_issues
        if deck is not None:
            self.deck = deck
        if description is not None:
            self.description = description
        if first_issue is not None:
            self.first_issue = first_issue
        if image is not None:
            self.image = image
        if last_issue is not None:
            self.last_issue = last_issue
        if location_credits is not None:
            self.location_credits = location_credits
        if object_credits is not None:
            self.object_credits = object_credits
        if person_credits is not None:
            self.person_credits = person_credits
        if publisher is not None:
            self.publisher = publisher
        if start_year is not None:
            self.start_year = start_year
        if team_credits is not None:
            self.team_credits = team_credits

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501

        Unique ID of the volume.  # noqa: E501

        :return: The id of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.

        Unique ID of the volume.  # noqa: E501

        :param id: The id of this Volume.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501

        Name of the volume.  # noqa: E501

        :return: The name of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.

        Name of the volume.  # noqa: E501

        :param name: The name of this Volume.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def aliases(self):
        """Gets the aliases of this Volume.  # noqa: E501

        List of aliases the volume is known by. A \\n (newline) seperates each alias.  # noqa: E501

        :return: The aliases of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Volume.

        List of aliases the volume is known by. A \\n (newline) seperates each alias.  # noqa: E501

        :param aliases: The aliases of this Volume.  # noqa: E501
        :type: object
        """

        self._aliases = aliases

    @property
    def api_detail_url(self):
        """Gets the api_detail_url of this Volume.  # noqa: E501

        URL pointing to the volume detail resource.  # noqa: E501

        :return: The api_detail_url of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._api_detail_url

    @api_detail_url.setter
    def api_detail_url(self, api_detail_url):
        """Sets the api_detail_url of this Volume.

        URL pointing to the volume detail resource.  # noqa: E501

        :param api_detail_url: The api_detail_url of this Volume.  # noqa: E501
        :type: object
        """

        self._api_detail_url = api_detail_url

    @property
    def site_detail_url(self):
        """Gets the site_detail_url of this Volume.  # noqa: E501

        URL pointing to the volume on Giant Bomb.  # noqa: E501

        :return: The site_detail_url of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._site_detail_url

    @site_detail_url.setter
    def site_detail_url(self, site_detail_url):
        """Sets the site_detail_url of this Volume.

        URL pointing to the volume on Giant Bomb.  # noqa: E501

        :param site_detail_url: The site_detail_url of this Volume.  # noqa: E501
        :type: object
        """

        self._site_detail_url = site_detail_url

    @property
    def date_added(self):
        """Gets the date_added of this Volume.  # noqa: E501

        Date the volume was added to Comic Vine.  # noqa: E501

        :return: The date_added of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this Volume.

        Date the volume was added to Comic Vine.  # noqa: E501

        :param date_added: The date_added of this Volume.  # noqa: E501
        :type: object
        """

        self._date_added = date_added

    @property
    def date_last_updated(self):
        """Gets the date_last_updated of this Volume.  # noqa: E501

        Date the volume was last updated on Comic Vine.  # noqa: E501

        :return: The date_last_updated of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._date_last_updated

    @date_last_updated.setter
    def date_last_updated(self, date_last_updated):
        """Sets the date_last_updated of this Volume.

        Date the volume was last updated on Comic Vine.  # noqa: E501

        :param date_last_updated: The date_last_updated of this Volume.  # noqa: E501
        :type: object
        """

        self._date_last_updated = date_last_updated

    @property
    def character_credits(self):
        """Gets the character_credits of this Volume.  # noqa: E501

        A list of characters that appear in this volume.  # noqa: E501

        :return: The character_credits of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._character_credits

    @character_credits.setter
    def character_credits(self, character_credits):
        """Sets the character_credits of this Volume.

        A list of characters that appear in this volume.  # noqa: E501

        :param character_credits: The character_credits of this Volume.  # noqa: E501
        :type: object
        """

        self._character_credits = character_credits

    @property
    def concept_credits(self):
        """Gets the concept_credits of this Volume.  # noqa: E501

        A list of concepts that appear in this volume.  # noqa: E501

        :return: The concept_credits of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._concept_credits

    @concept_credits.setter
    def concept_credits(self, concept_credits):
        """Sets the concept_credits of this Volume.

        A list of concepts that appear in this volume.  # noqa: E501

        :param concept_credits: The concept_credits of this Volume.  # noqa: E501
        :type: object
        """

        self._concept_credits = concept_credits

    @property
    def count_of_issues(self):
        """Gets the count_of_issues of this Volume.  # noqa: E501

        Number of issues included in this volume.  # noqa: E501

        :return: The count_of_issues of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._count_of_issues

    @count_of_issues.setter
    def count_of_issues(self, count_of_issues):
        """Sets the count_of_issues of this Volume.

        Number of issues included in this volume.  # noqa: E501

        :param count_of_issues: The count_of_issues of this Volume.  # noqa: E501
        :type: object
        """

        self._count_of_issues = count_of_issues

    @property
    def deck(self):
        """Gets the deck of this Volume.  # noqa: E501

        Brief summary of the volume.  # noqa: E501

        :return: The deck of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._deck

    @deck.setter
    def deck(self, deck):
        """Sets the deck of this Volume.

        Brief summary of the volume.  # noqa: E501

        :param deck: The deck of this Volume.  # noqa: E501
        :type: object
        """

        self._deck = deck

    @property
    def description(self):
        """Gets the description of this Volume.  # noqa: E501

        Description of the volume.  # noqa: E501

        :return: The description of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Volume.

        Description of the volume.  # noqa: E501

        :param description: The description of this Volume.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def first_issue(self):
        """Gets the first_issue of this Volume.  # noqa: E501

        The first issue in this volume.  # noqa: E501

        :return: The first_issue of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._first_issue

    @first_issue.setter
    def first_issue(self, first_issue):
        """Sets the first_issue of this Volume.

        The first issue in this volume.  # noqa: E501

        :param first_issue: The first_issue of this Volume.  # noqa: E501
        :type: object
        """

        self._first_issue = first_issue

    @property
    def image(self):
        """Gets the image of this Volume.  # noqa: E501

        Main image of the volume.  # noqa: E501

        :return: The image of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Volume.

        Main image of the volume.  # noqa: E501

        :param image: The image of this Volume.  # noqa: E501
        :type: object
        """

        self._image = image

    @property
    def last_issue(self):
        """Gets the last_issue of this Volume.  # noqa: E501

        The last issue in this volume.  # noqa: E501

        :return: The last_issue of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._last_issue

    @last_issue.setter
    def last_issue(self, last_issue):
        """Sets the last_issue of this Volume.

        The last issue in this volume.  # noqa: E501

        :param last_issue: The last_issue of this Volume.  # noqa: E501
        :type: object
        """

        self._last_issue = last_issue

    @property
    def location_credits(self):
        """Gets the location_credits of this Volume.  # noqa: E501

        List of locations that appeared in this volume.  # noqa: E501

        :return: The location_credits of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._location_credits

    @location_credits.setter
    def location_credits(self, location_credits):
        """Sets the location_credits of this Volume.

        List of locations that appeared in this volume.  # noqa: E501

        :param location_credits: The location_credits of this Volume.  # noqa: E501
        :type: object
        """

        self._location_credits = location_credits

    @property
    def object_credits(self):
        """Gets the object_credits of this Volume.  # noqa: E501

        List of objects that appeared in this volume.  # noqa: E501

        :return: The object_credits of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._object_credits

    @object_credits.setter
    def object_credits(self, object_credits):
        """Sets the object_credits of this Volume.

        List of objects that appeared in this volume.  # noqa: E501

        :param object_credits: The object_credits of this Volume.  # noqa: E501
        :type: object
        """

        self._object_credits = object_credits

    @property
    def person_credits(self):
        """Gets the person_credits of this Volume.  # noqa: E501

        List of people that worked on this volume.  # noqa: E501

        :return: The person_credits of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._person_credits

    @person_credits.setter
    def person_credits(self, person_credits):
        """Sets the person_credits of this Volume.

        List of people that worked on this volume.  # noqa: E501

        :param person_credits: The person_credits of this Volume.  # noqa: E501
        :type: object
        """

        self._person_credits = person_credits

    @property
    def publisher(self):
        """Gets the publisher of this Volume.  # noqa: E501

        The primary publisher a volume is attached to.  # noqa: E501

        :return: The publisher of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Volume.

        The primary publisher a volume is attached to.  # noqa: E501

        :param publisher: The publisher of this Volume.  # noqa: E501
        :type: object
        """

        self._publisher = publisher

    @property
    def start_year(self):
        """Gets the start_year of this Volume.  # noqa: E501

        The first year this volume appeared in comics.  # noqa: E501

        :return: The start_year of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this Volume.

        The first year this volume appeared in comics.  # noqa: E501

        :param start_year: The start_year of this Volume.  # noqa: E501
        :type: object
        """

        self._start_year = start_year

    @property
    def team_credits(self):
        """Gets the team_credits of this Volume.  # noqa: E501

        List of teams that appear in this volume.  # noqa: E501

        :return: The team_credits of this Volume.  # noqa: E501
        :rtype: object
        """
        return self._team_credits

    @team_credits.setter
    def team_credits(self, team_credits):
        """Sets the team_credits of this Volume.

        List of teams that appear in this volume.  # noqa: E501

        :param team_credits: The team_credits of this Volume.  # noqa: E501
        :type: object
        """

        self._team_credits = team_credits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Volume):
            return True

        return self.to_dict() != other.to_dict()
