# coding: utf-8

"""
    ComicVine API

    OpenAPI specification for the ComicVine API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from comicvine_client.configuration import Configuration


class VolumeAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'characters': 'list[object]',
        'concepts': 'list[object]',
        'count_of_issues': 'int',
        'first_issue': 'object',
        'image': 'object',
        'last_issue': 'object',
        'locations': 'list[object]',
        'objects': 'list[object]',
        'people': 'list[object]',
        'publisher': 'object',
        'start_year': 'str'
    }

    attribute_map = {
        'characters': 'characters',
        'concepts': 'concepts',
        'count_of_issues': 'count_of_issues',
        'first_issue': 'first_issue',
        'image': 'image',
        'last_issue': 'last_issue',
        'locations': 'locations',
        'objects': 'objects',
        'people': 'people',
        'publisher': 'publisher',
        'start_year': 'start_year'
    }

    def __init__(self, characters=None, concepts=None, count_of_issues=None, first_issue=None, image=None, last_issue=None, locations=None, objects=None, people=None, publisher=None, start_year=None, local_vars_configuration=None):  # noqa: E501
        """VolumeAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._characters = None
        self._concepts = None
        self._count_of_issues = None
        self._first_issue = None
        self._image = None
        self._last_issue = None
        self._locations = None
        self._objects = None
        self._people = None
        self._publisher = None
        self._start_year = None
        self.discriminator = None

        if characters is not None:
            self.characters = characters
        if concepts is not None:
            self.concepts = concepts
        if count_of_issues is not None:
            self.count_of_issues = count_of_issues
        if first_issue is not None:
            self.first_issue = first_issue
        if image is not None:
            self.image = image
        if last_issue is not None:
            self.last_issue = last_issue
        if locations is not None:
            self.locations = locations
        if objects is not None:
            self.objects = objects
        if people is not None:
            self.people = people
        if publisher is not None:
            self.publisher = publisher
        if start_year is not None:
            self.start_year = start_year

    @property
    def characters(self):
        """Gets the characters of this VolumeAllOf.  # noqa: E501

        A list of characters that appear in this volume.  # noqa: E501

        :return: The characters of this VolumeAllOf.  # noqa: E501
        :rtype: list[object]
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this VolumeAllOf.

        A list of characters that appear in this volume.  # noqa: E501

        :param characters: The characters of this VolumeAllOf.  # noqa: E501
        :type: list[object]
        """

        self._characters = characters

    @property
    def concepts(self):
        """Gets the concepts of this VolumeAllOf.  # noqa: E501

        A list of concepts that appear in this volume.  # noqa: E501

        :return: The concepts of this VolumeAllOf.  # noqa: E501
        :rtype: list[object]
        """
        return self._concepts

    @concepts.setter
    def concepts(self, concepts):
        """Sets the concepts of this VolumeAllOf.

        A list of concepts that appear in this volume.  # noqa: E501

        :param concepts: The concepts of this VolumeAllOf.  # noqa: E501
        :type: list[object]
        """

        self._concepts = concepts

    @property
    def count_of_issues(self):
        """Gets the count_of_issues of this VolumeAllOf.  # noqa: E501

        Number of issues included in this volume.  # noqa: E501

        :return: The count_of_issues of this VolumeAllOf.  # noqa: E501
        :rtype: int
        """
        return self._count_of_issues

    @count_of_issues.setter
    def count_of_issues(self, count_of_issues):
        """Sets the count_of_issues of this VolumeAllOf.

        Number of issues included in this volume.  # noqa: E501

        :param count_of_issues: The count_of_issues of this VolumeAllOf.  # noqa: E501
        :type: int
        """

        self._count_of_issues = count_of_issues

    @property
    def first_issue(self):
        """Gets the first_issue of this VolumeAllOf.  # noqa: E501

        The first issue in this volume.  # noqa: E501

        :return: The first_issue of this VolumeAllOf.  # noqa: E501
        :rtype: object
        """
        return self._first_issue

    @first_issue.setter
    def first_issue(self, first_issue):
        """Sets the first_issue of this VolumeAllOf.

        The first issue in this volume.  # noqa: E501

        :param first_issue: The first_issue of this VolumeAllOf.  # noqa: E501
        :type: object
        """

        self._first_issue = first_issue

    @property
    def image(self):
        """Gets the image of this VolumeAllOf.  # noqa: E501

        Main image of the volume.  # noqa: E501

        :return: The image of this VolumeAllOf.  # noqa: E501
        :rtype: object
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this VolumeAllOf.

        Main image of the volume.  # noqa: E501

        :param image: The image of this VolumeAllOf.  # noqa: E501
        :type: object
        """

        self._image = image

    @property
    def last_issue(self):
        """Gets the last_issue of this VolumeAllOf.  # noqa: E501

        The last issue in this volume.  # noqa: E501

        :return: The last_issue of this VolumeAllOf.  # noqa: E501
        :rtype: object
        """
        return self._last_issue

    @last_issue.setter
    def last_issue(self, last_issue):
        """Sets the last_issue of this VolumeAllOf.

        The last issue in this volume.  # noqa: E501

        :param last_issue: The last_issue of this VolumeAllOf.  # noqa: E501
        :type: object
        """

        self._last_issue = last_issue

    @property
    def locations(self):
        """Gets the locations of this VolumeAllOf.  # noqa: E501

        List of locations that appeared in this volume.  # noqa: E501

        :return: The locations of this VolumeAllOf.  # noqa: E501
        :rtype: list[object]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this VolumeAllOf.

        List of locations that appeared in this volume.  # noqa: E501

        :param locations: The locations of this VolumeAllOf.  # noqa: E501
        :type: list[object]
        """

        self._locations = locations

    @property
    def objects(self):
        """Gets the objects of this VolumeAllOf.  # noqa: E501

        List of objects that appeared in this volume.  # noqa: E501

        :return: The objects of this VolumeAllOf.  # noqa: E501
        :rtype: list[object]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this VolumeAllOf.

        List of objects that appeared in this volume.  # noqa: E501

        :param objects: The objects of this VolumeAllOf.  # noqa: E501
        :type: list[object]
        """

        self._objects = objects

    @property
    def people(self):
        """Gets the people of this VolumeAllOf.  # noqa: E501

        List of people that worked on this volume.  # noqa: E501

        :return: The people of this VolumeAllOf.  # noqa: E501
        :rtype: list[object]
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this VolumeAllOf.

        List of people that worked on this volume.  # noqa: E501

        :param people: The people of this VolumeAllOf.  # noqa: E501
        :type: list[object]
        """

        self._people = people

    @property
    def publisher(self):
        """Gets the publisher of this VolumeAllOf.  # noqa: E501

        The primary publisher a volume is attached to.  # noqa: E501

        :return: The publisher of this VolumeAllOf.  # noqa: E501
        :rtype: object
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this VolumeAllOf.

        The primary publisher a volume is attached to.  # noqa: E501

        :param publisher: The publisher of this VolumeAllOf.  # noqa: E501
        :type: object
        """

        self._publisher = publisher

    @property
    def start_year(self):
        """Gets the start_year of this VolumeAllOf.  # noqa: E501

        The first year this volume appeared in comics.  # noqa: E501

        :return: The start_year of this VolumeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this VolumeAllOf.

        The first year this volume appeared in comics.  # noqa: E501

        :param start_year: The start_year of this VolumeAllOf.  # noqa: E501
        :type: str
        """

        self._start_year = start_year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeAllOf):
            return True

        return self.to_dict() != other.to_dict()
