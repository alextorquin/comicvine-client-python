# coding: utf-8

"""
    ComicVine API

    OpenAPI specification for the ComicVine API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from comicvine_client.configuration import Configuration


class PersonAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'country': 'str',
        'created_characters': 'object',
        'death': 'date',
        'email': 'str',
        'hometown': 'str',
        'website': 'str'
    }

    attribute_map = {
        'country': 'country',
        'created_characters': 'created_characters',
        'death': 'death',
        'email': 'email',
        'hometown': 'hometown',
        'website': 'website'
    }

    def __init__(self, country=None, created_characters=None, death=None, email=None, hometown=None, website=None, local_vars_configuration=None):  # noqa: E501
        """PersonAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._country = None
        self._created_characters = None
        self._death = None
        self._email = None
        self._hometown = None
        self._website = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if created_characters is not None:
            self.created_characters = created_characters
        if death is not None:
            self.death = death
        if email is not None:
            self.email = email
        if hometown is not None:
            self.hometown = hometown
        if website is not None:
            self.website = website

    @property
    def country(self):
        """Gets the country of this PersonAllOf.  # noqa: E501

        Country the person resides in.  # noqa: E501

        :return: The country of this PersonAllOf.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PersonAllOf.

        Country the person resides in.  # noqa: E501

        :param country: The country of this PersonAllOf.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def created_characters(self):
        """Gets the created_characters of this PersonAllOf.  # noqa: E501

        Comic characters this person created.  # noqa: E501

        :return: The created_characters of this PersonAllOf.  # noqa: E501
        :rtype: object
        """
        return self._created_characters

    @created_characters.setter
    def created_characters(self, created_characters):
        """Sets the created_characters of this PersonAllOf.

        Comic characters this person created.  # noqa: E501

        :param created_characters: The created_characters of this PersonAllOf.  # noqa: E501
        :type created_characters: object
        """

        self._created_characters = created_characters

    @property
    def death(self):
        """Gets the death of this PersonAllOf.  # noqa: E501

        Date this person died on.  # noqa: E501

        :return: The death of this PersonAllOf.  # noqa: E501
        :rtype: date
        """
        return self._death

    @death.setter
    def death(self, death):
        """Sets the death of this PersonAllOf.

        Date this person died on.  # noqa: E501

        :param death: The death of this PersonAllOf.  # noqa: E501
        :type death: date
        """

        self._death = death

    @property
    def email(self):
        """Gets the email of this PersonAllOf.  # noqa: E501

        The email of this person.  # noqa: E501

        :return: The email of this PersonAllOf.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PersonAllOf.

        The email of this person.  # noqa: E501

        :param email: The email of this PersonAllOf.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def hometown(self):
        """Gets the hometown of this PersonAllOf.  # noqa: E501

        City or town the person resides in.  # noqa: E501

        :return: The hometown of this PersonAllOf.  # noqa: E501
        :rtype: str
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this PersonAllOf.

        City or town the person resides in.  # noqa: E501

        :param hometown: The hometown of this PersonAllOf.  # noqa: E501
        :type hometown: str
        """

        self._hometown = hometown

    @property
    def website(self):
        """Gets the website of this PersonAllOf.  # noqa: E501

        URL to the person website.  # noqa: E501

        :return: The website of this PersonAllOf.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this PersonAllOf.

        URL to the person website.  # noqa: E501

        :param website: The website of this PersonAllOf.  # noqa: E501
        :type website: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersonAllOf):
            return True

        return self.to_dict() != other.to_dict()
