# coding: utf-8

"""
    ComicVine API

    OpenAPI specification for the ComicVine API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from comicvine_client.configuration import Configuration


class BasePersonAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'birth': 'str',
        'count_of_issue_appearances': 'int',
        'gender': 'int',
        'story_arc_credits': 'list[object]',
        'volume_credits': 'list[Volume]',
        'issue_credits': 'list[Issue]'
    }

    attribute_map = {
        'birth': 'birth',
        'count_of_issue_appearances': 'count_of_issue_appearances',
        'gender': 'gender',
        'story_arc_credits': 'story_arc_credits',
        'volume_credits': 'volume_credits',
        'issue_credits': 'issue_credits'
    }

    def __init__(self, birth=None, count_of_issue_appearances=None, gender=None, story_arc_credits=None, volume_credits=None, issue_credits=None, local_vars_configuration=None):  # noqa: E501
        """BasePersonAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._birth = None
        self._count_of_issue_appearances = None
        self._gender = None
        self._story_arc_credits = None
        self._volume_credits = None
        self._issue_credits = None
        self.discriminator = None

        if birth is not None:
            self.birth = birth
        if count_of_issue_appearances is not None:
            self.count_of_issue_appearances = count_of_issue_appearances
        if gender is not None:
            self.gender = gender
        if story_arc_credits is not None:
            self.story_arc_credits = story_arc_credits
        if volume_credits is not None:
            self.volume_credits = volume_credits
        if issue_credits is not None:
            self.issue_credits = issue_credits

    @property
    def birth(self):
        """Gets the birth of this BasePersonAllOf.  # noqa: E501

        A date, if one exists, that the person was born on. Not an origin date.  # noqa: E501

        :return: The birth of this BasePersonAllOf.  # noqa: E501
        :rtype: str
        """
        return self._birth

    @birth.setter
    def birth(self, birth):
        """Sets the birth of this BasePersonAllOf.

        A date, if one exists, that the person was born on. Not an origin date.  # noqa: E501

        :param birth: The birth of this BasePersonAllOf.  # noqa: E501
        :type birth: str
        """

        self._birth = birth

    @property
    def count_of_issue_appearances(self):
        """Gets the count_of_issue_appearances of this BasePersonAllOf.  # noqa: E501

        Number of issues this person appears in.  # noqa: E501

        :return: The count_of_issue_appearances of this BasePersonAllOf.  # noqa: E501
        :rtype: int
        """
        return self._count_of_issue_appearances

    @count_of_issue_appearances.setter
    def count_of_issue_appearances(self, count_of_issue_appearances):
        """Sets the count_of_issue_appearances of this BasePersonAllOf.

        Number of issues this person appears in.  # noqa: E501

        :param count_of_issue_appearances: The count_of_issue_appearances of this BasePersonAllOf.  # noqa: E501
        :type count_of_issue_appearances: int
        """

        self._count_of_issue_appearances = count_of_issue_appearances

    @property
    def gender(self):
        """Gets the gender of this BasePersonAllOf.  # noqa: E501

        Gender of the person. Available options are: Male (1), Female (2), Other (3)  # noqa: E501

        :return: The gender of this BasePersonAllOf.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this BasePersonAllOf.

        Gender of the person. Available options are: Male (1), Female (2), Other (3)  # noqa: E501

        :param gender: The gender of this BasePersonAllOf.  # noqa: E501
        :type gender: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and gender not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def story_arc_credits(self):
        """Gets the story_arc_credits of this BasePersonAllOf.  # noqa: E501

        List of story arcs this person appears in.  # noqa: E501

        :return: The story_arc_credits of this BasePersonAllOf.  # noqa: E501
        :rtype: list[object]
        """
        return self._story_arc_credits

    @story_arc_credits.setter
    def story_arc_credits(self, story_arc_credits):
        """Sets the story_arc_credits of this BasePersonAllOf.

        List of story arcs this person appears in.  # noqa: E501

        :param story_arc_credits: The story_arc_credits of this BasePersonAllOf.  # noqa: E501
        :type story_arc_credits: list[object]
        """

        self._story_arc_credits = story_arc_credits

    @property
    def volume_credits(self):
        """Gets the volume_credits of this BasePersonAllOf.  # noqa: E501


        :return: The volume_credits of this BasePersonAllOf.  # noqa: E501
        :rtype: list[Volume]
        """
        return self._volume_credits

    @volume_credits.setter
    def volume_credits(self, volume_credits):
        """Sets the volume_credits of this BasePersonAllOf.


        :param volume_credits: The volume_credits of this BasePersonAllOf.  # noqa: E501
        :type volume_credits: list[Volume]
        """

        self._volume_credits = volume_credits

    @property
    def issue_credits(self):
        """Gets the issue_credits of this BasePersonAllOf.  # noqa: E501


        :return: The issue_credits of this BasePersonAllOf.  # noqa: E501
        :rtype: list[Issue]
        """
        return self._issue_credits

    @issue_credits.setter
    def issue_credits(self, issue_credits):
        """Sets the issue_credits of this BasePersonAllOf.


        :param issue_credits: The issue_credits of this BasePersonAllOf.  # noqa: E501
        :type issue_credits: list[Issue]
        """

        self._issue_credits = issue_credits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasePersonAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasePersonAllOf):
            return True

        return self.to_dict() != other.to_dict()
